import numpy as np
from ebsim import *

def ebsim_core():
    pass


def param_sequence():
    """
    Routine to create a sequence of input parameters for a simulated EB fitting sequence
    
    The parameters that are varied are photometric noise, integration time, RV samples,
    radius ratio of the stars, and impact parameter

    """

    # Photometric noise (as a fraction of total flux)
    photnoise=np.array([10,100,1000,10000])/1e6

    # Integration time in seconds
    itime = np.array([60,900,1800])

    # Total number of RV samples
    RVsamples = np.array([10,50,100])

    # Radius ratio
    Rratio = np.array([0.2,0.6,1.0])

    # Imapct parameters of the primary eclipse
    impact = np.array([0,0.75,-999])

    # Total number of iterations needed in full sequence
    niter = len(photnoise)*len(itime)*len(RVsamples)*len(Rratio)*len(impact)
    
    # Array of parameters for each iteration
    params = np.zeros((niter,5))


    # Create array of parameters
    seq_num = []
    index = 0
    for i in range(len(photnoise)):
        for j in range(len(itime)):
            for k in range(len(RVsamples)):
                for l in range(len(Rratio)):
                    for m in range(len(impact)):
                        impval = 1+0.5*Rratio[l] if m == 2 else impact[m]
                        params[index,:] = np.array([photnoise[i],itime[j],RVsamples[k],Rratio[l],impval])
                        seq_num.append(int(index))
                        index += 1
                                    
    return params,seq_num


def fit_sequence(params,seq_num):
    """ 
    Routine to run the sequence of fits generated by param_sequence

    """
    
    ebpar0,data = make_model_data(input)

    all_fit(ebpar0,data)

    bestvals()

    params_of_interest()

    plot_model()
    
    triangle_plot()

    

#----------------------------------------------------------------------
# GET_PATH
#----------------------------------------------------------------------
def get_path(network=None):
    """
    get_path:
    ---------
    set path given network choice

    inputs:
    -------
    "network": name of network choices are:
               None: local path
               astro: Caltech astronomy network
               gps: Caltech geology and planetary science network
               eb: local path but for an individual KIC target
    example:
    --------
    path = get_path(network='astro')

    """

    # Set correct paths here
    if network == None:
        path = '/Users/jonswift/Astronomy/EBs/outdata/'

    if network == 'pegasus':
        path = '/'

    return path
    
